name: Telegram APK Patcher

on:
  workflow_dispatch:
    inputs:
      tg-variant:
        description: 'Variante de Telegram'
        required: true
        default: 'Normal'
        type: choice
        options:
          - Normal
          - Anti

env:
  TG_VARIANT: ${{ github.event.inputs.tg-variant }}
  APKTOOL_VERSION: 2.11.1

jobs:
  get_telegram_version:
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.set_version.outputs.latest_version }}
      download_url: ${{ steps.get_download_url.outputs.download_url }}
    
    steps:
      - name: Verificar última versión de Telegram APK
        id: check_version
        run: |
          REDIRECT_URL=$(curl -s -I -L "https://telegram.org/dl/android/apk" | grep -i "location:" | tail -n 1 | awk '{print $2}' | tr -d '\r')
          echo "URL de redirección: $REDIRECT_URL"
          echo "REDIRECT_URL=$REDIRECT_URL" >> $GITHUB_ENV
        shell: bash

      - name: Establecer versión provisional
        id: set_version
        run: |
          DATE_VERSION=$(date +"%Y%m%d")
          echo "latest_version=$DATE_VERSION" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Establecer URL de descarga
        id: get_download_url
        run: |
          echo "download_url=${{ env.REDIRECT_URL }}" >> $GITHUB_OUTPUT
        shell: bash

  patch_telegram_apk:
    runs-on: ubuntu-latest
    needs: get_telegram_version
    
    steps:
      - name: Instalar dependencias
        run: |
          sudo apt-get update
          sudo apt-get install -y zipalign apksigner aapt openjdk-11-jre-headless python3-pip
          python -m pip install --upgrade pip
        shell: bash

      - name: Instalar apktool
        run: |
          # Descargar la última versión de apktool
          sudo -E sh -c 'wget https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_${{ env.APKTOOL_VERSION }}.jar -O /usr/local/bin/apktool.jar'
          sudo chmod +r /usr/local/bin/apktool.jar
          
          # Crear script wrapper para apktool
          echo '#!/bin/bash
          java -jar /usr/local/bin/apktool.jar "$@"' | sudo tee /usr/local/bin/apktool
          sudo chmod +x /usr/local/bin/apktool
          
          # Verificar instalación
          apktool --version
        shell: bash

      - name: Descargar Telegram APK
        run: |
          echo "Descargando desde URL: ${{ needs.get_telegram_version.outputs.download_url }}"
          curl -L "${{ needs.get_telegram_version.outputs.download_url }}" -o Telegram.apk
          
          # Verificar descarga
          if [ -f "Telegram.apk" ]; then
            echo "Descarga exitosa"
            ls -la Telegram.apk
          else
            echo "Descarga fallida"
            exit 1
          fi
        shell: bash
      
      - name: Extraer versión del APK
        id: extract_version
        run: |
          VERSION=$(aapt dump badging Telegram.apk | grep versionName | sed -n 's/.*versionName=\([^\ ]*\).*/\1/p' | sed "s/'//g")
          echo "Versión del APK: $VERSION"
          echo "APK_VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Descompilar APK con apktool
        run: |
          # Descompilar el APK utilizando apktool
          apktool d -f -o Telegram-decompiled Telegram.apk
          
          # Verificar la estructura
          echo "Contenido del directorio descompilado:"
          ls -la Telegram-decompiled/
        shell: bash
      
      - name: Crear y configurar las herramientas de parcheo
        run: |
          # Descargar tgpatcher.py
          curl -L -o tgpatcher.py https://raw.githubusercontent.com/AbhiTheModder/termux-scripts/refs/heads/main/tgpatcher.py
          chmod +x tgpatcher.py

          # Descargar herramientas de firma
          curl -L -o apksigner.jar https://github.com/AbhiTheModder/termux-scripts/raw/refs/heads/main/keystore/apksigner.jar
          curl -L -o debug.keystore https://github.com/AbhiTheModder/termux-scripts/raw/refs/heads/main/keystore/debug.keystore

          # Crear la función mejorada en un archivo separado
          cat > premium_patcher.py << 'EOF'
          #!/usr/bin/env python3

          def find_and_modify_isPremiumFeatureAvailable(root_directory):
              """
              Encuentra y modifica todos los métodos isPremiumFeatureAvailable en el APK descompilado
              para que devuelvan siempre true.
              """
              import os
              import re

              # Colores para mensajes en la terminal
              GREEN = "\033[92m"
              YELLOW = "\033[93m"
              NC = "\033[0m"  # No Color

              methods_found = 0
              files_modified = 0

              # Patrones para buscar el método isPremiumFeatureAvailable
              method_patterns = [
                  r"\.method (?:private|public|protected)(?: final)? isPremiumFeatureAvailable\(I\)Z",  # Método declaración
                  r"Lorg/telegram/.*->isPremiumFeatureAvailable\(I\)Z"  # Referencias al método
              ]

              # Patrón para encontrar archivos smali relevantes
              for root, _, files in os.walk(root_directory):
                  for file in files:
                      if file.endswith(".smali"):
                          file_path = os.path.join(root, file)

                          try:
                              with open(file_path, "r", encoding="utf-8") as f:
                                  content = f.read()
                          except Exception as e:
                              print(f"{YELLOW}WARN: {NC}Error al leer {file_path}: {e}")
                              continue

                          # Buscar cualquier referencia al método
                          method_match = False
                          for pattern in method_patterns:
                              if re.search(pattern, content):
                                  method_match = True
                                  break

                          if not method_match:
                              continue

                          print(f"{GREEN}INFO: {NC}Encontrado método isPremiumFeatureAvailable en {file_path}")
                          methods_found += 1

                          # Modificar el archivo
                          modified = False
                          new_lines = []
                          in_method = False

                          with open(file_path, "r", encoding="utf-8") as f:
                              lines = f.readlines()

                          for i, line in enumerate(lines):
                              # Detectar inicio del método
                              for pattern in method_patterns[:1]:  # Solo usar el primer patrón para la declaración del método
                                  if re.search(pattern, line):
                                      in_method = True
                                      new_lines.append(line)
                                      print(f"{GREEN}INFO: {NC}Encontrada declaración del método en línea {i+1}")
                                      break
                              else:
                                  # Si no es el inicio del método, añadir la línea como está
                                  if not in_method:
                                      new_lines.append(line)
                                      continue

                              # Dentro del método
                              if in_method:
                                  # Modificar la línea que establece el valor de retorno a false (0x0)
                                  if "const/4" in line and "0x0" in line:
                                      new_lines.append(line.replace("const/4 v0, 0x0", "const/4 v0, 0x1").replace("const/4 v1, 0x0", "const/4 v1, 0x1"))
                                      modified = True
                                      print(f"{GREEN}INFO: {NC}Modificada línea {i+1}: {line.strip()} -> const/4 vX, 0x1")
                                  else:
                                      new_lines.append(line)

                                  # Detectar fin del método
                                  if ".end method" in line:
                                      in_method = False

                          # Guardar cambios si se modificó algo
                          if modified:
                              with open(file_path, "w", encoding="utf-8") as f:
                                  f.writelines(new_lines)
                              files_modified += 1
                              print(f"{GREEN}INFO: {NC}Archivo {file_path} modificado con éxito")

              # Búsqueda adicional para modificar invocaciones directas
              for root, _, files in os.walk(root_directory):
                  for file in files:
                      if file.endswith(".smali"):
                          file_path = os.path.join(root, file)

                          try:
                              with open(file_path, "r", encoding="utf-8") as f:
                                  content = f.read()
                          except Exception as e:
                              continue

                          # Buscar invoke-direct o invoke-virtual al método
                          if "invoke-" in content and "isPremiumFeatureAvailable(I)Z" in content:
                              # Buscar el patrón de uso del resultado (normalmente if-eqz o if-nez después de la invocación)
                              lines = content.split('\n')
                              modified = False
                              new_lines = []

                              i = 0
                              while i < len(lines):
                                  line = lines[i]
                                  new_lines.append(line)

                                  # Si encuentra una invocación a isPremiumFeatureAvailable
                                  if "invoke-" in line and "isPremiumFeatureAvailable(I)Z" in line:
                                      print(f"{GREEN}INFO: {NC}Encontrada invocación a isPremiumFeatureAvailable en {file_path}")

                                      # Obtener el registro de resultado
                                      result_reg_match = re.search(r"move-result[^ ]* (v\d+)", lines[i+1] if i+1 < len(lines) else "")
                                      if result_reg_match:
                                          result_reg = result_reg_match.group(1)

                                          # Reemplazar move-result con const/4 v{reg}, 0x1
                                          if i+1 < len(lines):
                                              new_lines.append(f"    const/4 {result_reg}, 0x1")
                                              i += 1  # Saltar la línea original de move-result
                                              modified = True
                                              print(f"{GREEN}INFO: {NC}Reemplazada línea move-result por const/4 {result_reg}, 0x1")

                                  i += 1

                              # Guardar cambios si se modificó algo
                              if modified:
                                  with open(file_path, "w", encoding="utf-8") as f:
                                      f.write("\n".join(new_lines))
                                  files_modified += 1
                                  print(f"{GREEN}INFO: {NC}Archivo {file_path} modificado con éxito (invocación)")

              if methods_found > 0:
                  print(f"{GREEN}INFO: {NC}Se encontraron {methods_found} métodos isPremiumFeatureAvailable y se modificaron {files_modified} archivos.")
                  return True
              else:
                  print(f"{YELLOW}WARN: {NC}No se encontró ningún método isPremiumFeatureAvailable en los archivos smali.")
                  return False
          EOF

          # Hacer el archivo ejecutable
          chmod +x premium_patcher.py

          # Modificar tgpatcher.py para usar nuestra función en lugar de la original
          # Primero, importar nuestra función
          echo "from premium_patcher import find_and_modify_isPremiumFeatureAvailable" | cat - tgpatcher.py > temp && mv temp tgpatcher.py

          # Ahora reemplazar las llamadas a las funciones originales con nuestra función
          sed -i 's/automate_method_modification(root_directory, "private isPremiumFeatureAvailable(I)Z", modify_isPremiumFeatureAvailable_method)/find_and_modify_isPremiumFeatureAvailable(root_directory)/g' tgpatcher.py
          sed -i 's/or automate_method_modification(root_directory, "public final isPremiumFeatureAvailable(I)Z", modify_isPremiumFeatureAvailable_method)/# Removed redundant call/g' tgpatcher.py

          # Modificar tgpatcher.py para usar el directorio descompilado por apktool
          sed -i "s/input(\"Give me the decompiled directory path (Default is 'Telegram'): \")/\"Telegram-decompiled\"/g" tgpatcher.py

          # Verificar descargas
          echo "Archivos modificados:"
          ls -la tgpatcher.py apksigner.jar debug.keystore premium_patcher.py
        shell: bash
      
      - name: Ejecutar script de parcheo
        run: |
          # Ejecutar según la variante seleccionada
          if [ "${{ env.TG_VARIANT }}" = "Normal" ]; then
            python tgpatcher.py --normal --dir Telegram-decompiled
          elif [ "${{ env.TG_VARIANT }}" = "Anti" ] || [ "${{ env.TG_VARIANT }}" = "X" ]; then
            python tgpatcher.py --anti --dir Telegram-decompiled
          else
            echo "Variante desconocida: ${{ env.TG_VARIANT }}"
            exit 1
          fi
        shell: bash
      
      - name: Recompilar APK con apktool
        run: |
          # Recompilar el APK usando apktool
          apktool b Telegram-decompiled -o Telegram-${{ env.TG_VARIANT }}-Patched-Unsigned.apk
          
          # Verificar si se creó el APK
          if [ -f "Telegram-${{ env.TG_VARIANT }}-Patched-Unsigned.apk" ]; then
            echo "Recompilación exitosa"
            ls -la Telegram-${{ env.TG_VARIANT }}-Patched-Unsigned.apk
          else
            echo "La recompilación falló"
            exit 1
          fi
        shell: bash
      
      - name: Firmar APK
        run: |
          echo "Alineando APK..."
          zipalign -p -f -v 4 Telegram-${{ env.TG_VARIANT }}-Patched-Unsigned.apk aligned.apk
          
          echo "Firmando APK..."
          java -jar apksigner.jar sign --ks debug.keystore --ks-pass pass:android --key-pass pass:android --out Telegram-${{ env.TG_VARIANT }}-Patched-Signed.apk aligned.apk
          
          # Verificar firma
          if [ -f "Telegram-${{ env.TG_VARIANT }}-Patched-Signed.apk" ]; then
            echo "Firmado exitoso"
            java -jar apksigner.jar verify --verbose Telegram-${{ env.TG_VARIANT }}-Patched-Signed.apk || true
          else
            echo "El firmado falló"
            exit 1
          fi
        shell: bash
      
      - name: Renombrar APK final con versión
        run: |
          VERSION="${{ needs.get_telegram_version.outputs.latest_version }}"
          mv Telegram-${{ env.TG_VARIANT }}-Patched-Signed.apk Telegram-${{ env.TG_VARIANT }}-${VERSION}-Patched.apk
        shell: bash
      
      - name: Guardar APK original como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: Original-Telegram-APK
          path: Telegram.apk
          if-no-files-found: error
      
      - name: Guardar APK parcheado como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: Telegram-${{ env.TG_VARIANT }}-${{ needs.get_telegram_version.outputs.latest_version }}-Patched
          path: Telegram-${{ env.TG_VARIANT }}-${{ needs.get_telegram_version.outputs.latest_version }}-Patched.apk
          if-no-files-found: error

  create_release:
    runs-on: ubuntu-latest
    needs: [patch_telegram_apk, get_telegram_version]
    
    steps:
      - name: Descargar APK parcheado
        uses: actions/download-artifact@v4
        with:
          name: Telegram-${{ env.TG_VARIANT }}-${{ needs.get_telegram_version.outputs.latest_version }}-Patched
          path: .
      
      - name: Crear Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: telegram-${{ env.TG_VARIANT }}-${{ needs.get_telegram_version.outputs.latest_version }}
          name: Telegram ${{ env.TG_VARIANT }} ${{ needs.get_telegram_version.outputs.latest_version }} Parcheado
          draft: false
          prerelease: false
          files: |
            Telegram-${{ env.TG_VARIANT }}-${{ needs.get_telegram_version.outputs.latest_version }}-Patched.apk
          body: |
            # Telegram ${{ env.TG_VARIANT }} ${{ needs.get_telegram_version.outputs.latest_version }} Parcheado
            
            Esta es una versión parcheada automáticamente del APK de Telegram para Android.
            
            ## Variante: ${{ env.TG_VARIANT }}
            
            ### Cambios:
            - Restricciones eliminadas (variante Normal)
            - Características premium añadidas (variante Anti) - si es aplicable
            
            **Nota:** Este APK es una modificación del APK original de Telegram. Úsalo bajo tu propio riesgo.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Mostrar enlace de descarga
        run: |
          echo "URL de descarga: ${{ steps.create_release.outputs.url }}"
        shell: bash
