name: Telegram APK Patcher

on:
  workflow_dispatch:
    inputs:
      tg-variant:
        description: 'Variante de Telegram'
        required: true
        default: 'Normal'
        type: choice
        options:
          - Normal
          - Anti

env:
  TG_VARIANT: ${{ github.event.inputs.tg-variant }}

jobs:
  get_telegram_version:
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.set_version.outputs.latest_version }}
      download_url: ${{ steps.get_download_url.outputs.download_url }}
    
    steps:
      - name: Verificar última versión de Telegram APK
        id: check_version
        run: |
          REDIRECT_URL=$(curl -s -I -L "https://telegram.org/dl/android/apk" | grep -i "location:" | tail -n 1 | awk '{print $2}' | tr -d '\r')
          echo "URL de redirección: $REDIRECT_URL"
          echo "REDIRECT_URL=$REDIRECT_URL" >> $GITHUB_ENV
        shell: bash

      - name: Establecer versión provisional
        id: set_version
        run: |
          DATE_VERSION=$(date +"%Y%m%d")
          echo "latest_version=$DATE_VERSION" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Establecer URL de descarga
        id: get_download_url
        run: |
          echo "download_url=${{ env.REDIRECT_URL }}" >> $GITHUB_OUTPUT
        shell: bash

  patch_telegram_apk:
    runs-on: ubuntu-latest
    needs: get_telegram_version
    
    steps:
      - name: Instalar dependencias
        run: |
          sudo apt-get update
          sudo apt-get install -y zipalign apksigner aapt openjdk-11-jre-headless python3-pip unzip
          python -m pip install --upgrade pip
        shell: bash

      - name: Descargar Telegram APK
        run: |
          echo "Descargando desde URL: ${{ needs.get_telegram_version.outputs.download_url }}"
          curl -L "${{ needs.get_telegram_version.outputs.download_url }}" -o Telegram.apk
          
          # Verificar descarga
          if [ -f "Telegram.apk" ]; then
            echo "Descarga exitosa"
            ls -la Telegram.apk
          else
            echo "Descarga fallida"
            exit 1
          fi
        shell: bash
      
      - name: Extraer versión del APK
        id: extract_version
        run: |
          VERSION=$(aapt dump badging Telegram.apk | grep versionName | sed -n 's/.*versionName=\([^\ ]*\).*/\1/p' | sed "s/'//g")
          echo "Versión del APK: $VERSION"
          echo "APK_VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Descomprimir APK para parcheo
        run: |
          # Descomprimir el APK
          mkdir -p Telegram
          cd Telegram
          unzip -q ../Telegram.apk
          cd ..
          
          # Verificar la estructura
          echo "Contenido del directorio Telegram:"
          ls -la Telegram/
        shell: bash
      
      - name: Descargar herramientas de parcheo
        run: |
          # Descargar tgpatcher.py
          curl -L -o tgpatcher.py https://raw.githubusercontent.com/AbhiTheModder/termux-scripts/refs/heads/main/tgpatcher.py
          chmod +x tgpatcher.py
          
          # Descargar herramientas de firma
          curl -L -o apksigner.jar https://github.com/AbhiTheModder/termux-scripts/raw/refs/heads/main/keystore/apksigner.jar
          curl -L -o debug.keystore https://github.com/AbhiTheModder/termux-scripts/raw/refs/heads/main/keystore/debug.keystore
          
          # Verificar descargas
          echo "Archivos descargados:"
          ls -la tgpatcher.py apksigner.jar debug.keystore
        shell: bash
      
      - name: Ejecutar script de parcheo
        run: |
          # Modificar tgpatcher.py para evitar la solicitud de entrada
          sed -i "s/input(\"Give me the decompiled directory path (Default is 'Telegram'): \")/\"Telegram\"/g" tgpatcher.py
          
          # Ejecutar según la variante seleccionada
          if [ "${{ env.TG_VARIANT }}" = "Normal" ]; then
            python tgpatcher.py --normal --dir Telegram
          elif [ "${{ env.TG_VARIANT }}" = "Anti" ] || [ "${{ env.TG_VARIANT }}" = "X" ]; then
            python tgpatcher.py --anti --dir Telegram
          else
            echo "Variante desconocida: ${{ env.TG_VARIANT }}"
            exit 1
          fi
          
          # Verificar si se creó el APK parcheado
          if [ -f "Telegram-${{ env.TG_VARIANT }}-Patched.apk" ]; then
            echo "Parcheo exitoso"
            ls -la Telegram-${{ env.TG_VARIANT }}-Patched.apk
          else
            echo "El parcheo falló - intentando reempaquetar manualmente"
            cd Telegram
            zip -r ../Telegram-${{ env.TG_VARIANT }}-Patched.apk .
            cd ..
          fi
        shell: bash
      
      - name: Firmar APK
        run: |
          echo "Alineando APK..."
          zipalign -p -f -v 4 Telegram-${{ env.TG_VARIANT }}-Patched.apk aligned.apk || true
          
          echo "Firmando APK..."
          if [ -f "aligned.apk" ] && [ -s "aligned.apk" ]; then
            java -jar apksigner.jar sign --ks debug.keystore --ks-pass pass:android --key-pass pass:android --out Telegram-${{ env.TG_VARIANT }}-Patched-Signed.apk aligned.apk
          else
            echo "El archivo aligned.apk no existe o está vacío, intentando firmar el archivo original parcheado"
            java -jar apksigner.jar sign --ks debug.keystore --ks-pass pass:android --key-pass pass:android --out Telegram-${{ env.TG_VARIANT }}-Patched-Signed.apk Telegram-${{ env.TG_VARIANT }}-Patched.apk
          fi
          
          # Verificar firma
          if [ -f "Telegram-${{ env.TG_VARIANT }}-Patched-Signed.apk" ]; then
            echo "Firmado exitoso"
            java -jar apksigner.jar verify --verbose Telegram-${{ env.TG_VARIANT }}-Patched-Signed.apk || true
          else
            echo "El firmado falló"
            exit 1
          fi
        shell: bash
      
      - name: Renombrar APK final con versión
        run: |
          VERSION="${{ needs.get_telegram_version.outputs.latest_version }}"
          mv Telegram-${{ env.TG_VARIANT }}-Patched-Signed.apk Telegram-${{ env.TG_VARIANT }}-${VERSION}-Patched.apk
        shell: bash
      
      - name: Guardar APK original como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: Original-Telegram-APK
          path: Telegram.apk
          if-no-files-found: error
      
      - name: Guardar APK parcheado como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: Telegram-${{ env.TG_VARIANT }}-${{ needs.get_telegram_version.outputs.latest_version }}-Patched
          path: Telegram-${{ env.TG_VARIANT }}-${{ needs.get_telegram_version.outputs.latest_version }}-Patched.apk
          if-no-files-found: error

  create_release:
    runs-on: ubuntu-latest
    needs: [patch_telegram_apk, get_telegram_version]
    
    steps:
      - name: Descargar APK parcheado
        uses: actions/download-artifact@v4
        with:
          name: Telegram-${{ env.TG_VARIANT }}-${{ needs.get_telegram_version.outputs.latest_version }}-Patched
          path: .
      
      - name: Crear Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: telegram-${{ env.TG_VARIANT }}-${{ needs.get_telegram_version.outputs.latest_version }}
          name: Telegram ${{ env.TG_VARIANT }} ${{ needs.get_telegram_version.outputs.latest_version }} Parcheado
          draft: false
          prerelease: false
          files: |
            Telegram-${{ env.TG_VARIANT }}-${{ needs.get_telegram_version.outputs.latest_version }}-Patched.apk
          body: |
            # Telegram ${{ env.TG_VARIANT }} ${{ needs.get_telegram_version.outputs.latest_version }} Parcheado
            
            Esta es una versión parcheada automáticamente del APK de Telegram para Android.
            
            ## Variante: ${{ env.TG_VARIANT }}
            
            ### Cambios:
            - Restricciones eliminadas (variante Normal)
            - Características premium añadidas (variante Anti) - si es aplicable
            
            **Nota:** Este APK es una modificación del APK original de Telegram. Úsalo bajo tu propio riesgo.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Mostrar enlace de descarga
        run: |
          echo "URL de descarga: ${{ steps.create_release.outputs.url }}"
        shell: bash
